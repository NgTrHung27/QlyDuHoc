// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

// Bảng người dùng (đăng nhập, đăng ký, hồ sơ)
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  role UserRole @default(USER)

  // Đăng nhập
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String

  // Thông tin người dùng, đăng ký
  name        String
  dob         DateTime
  address     String
  phoneNumber String
  gender      String
  cccd        String   @unique
  description String?
  avatar      String?
  isPublished Boolean  @default(false)

  schoolId String? @db.ObjectId
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  accounts       Account[]
  activateTokens ActivateToken[]
  certificates   Certificate[]
  blogs          Blog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model ActivateToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String
  otp   String @unique

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token, userId])
  @@index([userId])
}

enum SchoolCategory {
  THPT
  CAODANG
  DAIHOC
}

enum CertificateCategory {
  IELTS
  TOEFL
}

model Certificate {
  id       String              @id @default(auto()) @map("_id") @db.ObjectId
  category SchoolCategory      @default(THPT)
  english  CertificateCategory @default(IELTS)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model School {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  logoUrl       String @db.String
  backgroundUrl String @db.String
  name          String
  description   String @db.String
  colorValue    String

  users      User[]
  operations Operation[]
  blogs      Blog[]
  programs   Program[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Bảng cơ sở của trường học
model Operation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String
  description   String @db.String
  backgroundUrl String @db.String

  schoolId String? @db.ObjectId
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model Blog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String @db.String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  schoolId String? @db.ObjectId
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, schoolId])
}

model Program {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String @db.String
  fee         Float
  picOne      String @db.String
  picTwo      String @db.String

  schoolId String? @db.ObjectId
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}
